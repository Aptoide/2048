package com.appcoins.eskills2048.activity;

import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.net.Uri;
import android.os.Bundle;
import androidx.activity.result.ActivityResultLauncher;
import androidx.activity.result.contract.ActivityResultContracts;
import androidx.annotation.Nullable;
import androidx.appcompat.app.AppCompatActivity;
import com.appcoins.eskills2048.BuildConfig;
import dagger.hilt.android.AndroidEntryPoint;
import java.util.List;

@AndroidEntryPoint public class FinishGameActivity extends AppCompatActivity {
  //result codes for endgame activity
  private static final int RESULT_OK = 0;
  private static final int RESULT_RESTART = 1;
  private static final int RESULT_SERVICE_UNAVAILABLE = 2;
  private static final int RESULT_ERROR = 3;
  private static final int RESULT_INVALID_URL = 4;
  public static final String SESSION = "SESSION";

  // activity result launcher
  private ActivityResultLauncher<Intent> mLauncher;

  public static Intent buildIntent(Context context, String session) {
    Intent intent = new Intent(context, FinishGameActivity.class);
    intent.putExtra(SESSION, session);
    return intent;
  }

  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    String session = getIntent().getStringExtra(SESSION);
    createLauncher();
    launchEskillsEndgameFlow(session);
  }

  private void createLauncher() {
    mLauncher =
        registerForActivityResult(new ActivityResultContracts.StartActivityForResult(), result -> {
          switch (result.getResultCode()) {
            case RESULT_OK:
              /*DeviceScreenManager.stopKeepAwake(getWindow());
              Intent restartIntent = new Intent(this, LaunchActivity.class);
              restartIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
              startActivity(restartIntent);
              finish();*/
              break;
            case RESULT_RESTART:
              // TODO
              break;
            case RESULT_SERVICE_UNAVAILABLE:
              // TODO
              break;
            case RESULT_ERROR:
              // TODO
              break;
            case RESULT_INVALID_URL:
              // TODO
              break;
            default:
              // TODO
              break;
          }
        });
  }

  private void launchEskillsEndgameFlow(String session) {
    String url = BuildConfig.BASE_HOST_PAYMENT
        + "/transaction/eskills/endgame?"
        + "session="
        + session
        + "&domain="
        + BuildConfig.APPLICATION_ID;

    Intent intent = buildTargetIntent(url);
    try {
      mLauncher.launch(intent);
    } catch (Exception e) {
      e.printStackTrace();
    }
  }

  /**
   * This method generates the intent with the provided One Step URL to target the
   * AppCoins Wallet.
   *
   * @param url The url that generated by following the One Step payment rules
   *
   * @return The intent used to call the wallet
   */
  private Intent buildTargetIntent(String url) {
    Intent intent = new Intent(Intent.ACTION_VIEW);
    intent.setData(Uri.parse(url));
    // Check if there is an application that can process the AppCoins Billing
    // flow
    PackageManager packageManager = getApplicationContext().getPackageManager();
    List<ResolveInfo> appsList =
        packageManager.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);
    for (ResolveInfo app : appsList) {
      if (app.activityInfo.packageName.equals("cm.aptoide.pt")) {
        // If there's aptoide installed always choose Aptoide as default to open url
        intent.setPackage(app.activityInfo.packageName);
        break;
      } else if (app.activityInfo.packageName.equals(BuildConfig.WALLET_PACKAGE_NAME)) {
        // If Aptoide is not installed and wallet is installed then choose Wallet
        // as default to open url
        intent.setPackage(app.activityInfo.packageName);
      }
    }
    return intent;
  }
}
